# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: OPERANDI CI/CD

# the workflow executes on pushes or pull requests to the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
# these are the jobs that are executed. Currently, there are only two jobs - build and publish.
jobs:
  build:

    # the CI pipeline runs on the operating systems mentioned in matrix.os (below)
    runs-on: ${{ matrix.os }}
    strategy:
      # when fail-fast is set to true, GitHub cancels all in-progress jobs if any matrix job fails. Default: true
      fail-fast: false
      # matrices define different versions or operating systems
      matrix:
        python-version: ["3.8.16", "3.9.16", "3.10.9"]
        # other possible options for os are: [windows-latest, macOS-latest]
        os: [ubuntu-latest]
    
    # steps of the build job
    steps:
    - uses: actions/checkout@v2
    
    - name: Install sudo package
      run: apt update && apt install sudo

    - name: Setup agent tools directory
      run: |
        sudo mkdir -p -m 777 /opt/hostedtoolcache
        export AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        architecture: 'x64'
      env:
        AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
              
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

#  publish_all: 
#    needs: build
#    runs-on: ubuntu-latest
#
#    env:
#      DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
#      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#      REPO_NAME: operandi-all-in-one
#      BASE_IMAGE: ubuntu:18.04
#
#    steps:
#    - uses: actions/checkout@v2
#    - name: Docker login
#      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
#      
#    - name: Docker build
#      run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:latest --build-arg BASE_IMAGE=$BASE_IMAGE
#      
#    - name: Docker push
#      run: docker push $DOCKER_USER/$REPO_NAME:latest
#      
#    - name: Docker logout
#      # To delete the password from potential temporary config files
#      run: docker logout#

  build-and-push-operandi-broker-image:
    name: Push operandi-broker images to registry
    environment:
      name: production
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-operandi-broker
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./src
          file: ./src/Dockerfile_broker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 
          
          
  build-and-push-operandi-server-image:
    name: Push operandi-server images to registry
    environment:
      name: production
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-operandi-server
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./src
          file: ./src/Dockerfile_server          
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 
